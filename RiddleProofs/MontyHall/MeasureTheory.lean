import Mathlib.Probability.Distributions.Uniform
import Mathlib.Probability.Kernel.Posterior

/-! Written by Matteo Cipollina

This file contains generic measure theory and probability theory.
-/

set_option linter.unusedVariables false

namespace Measure

open PMF ProbabilityTheory MeasureTheory Filter Finset
open scoped ENNReal

/-- Value of a `compProd` measure on a rectangle whose first side is a singleton. -/
@[simp]
lemma compProd_apply_singleton
    {Œ© ùìß : Type*} [MeasurableSpace Œ©] [MeasurableSpace ùìß] [MeasurableSingletonClass Œ©]
    (Œº : Measure Œ©) [SFinite Œº] (Œ∫ : Kernel Œ© ùìß) [IsSFiniteKernel Œ∫] (a : Œ©) {s : Set ùìß}
    (hs : MeasurableSet s) :
    (Œº.compProd Œ∫) ({a} √óÀ¢ s) = Œº {a} * Œ∫ a s := by
  have h :=
    Measure.compProd_apply_prod (Œº := Œº) (Œ∫ := Œ∫)
      (s := ({a} : Set Œ©)) (t := s) (MeasurableSet.singleton a) hs
  have h_int :
      (‚à´‚Åª œâ in ({a} : Set Œ©), Œ∫ œâ s ‚àÇŒº) = Œº {a} * Œ∫ a s := by
    rw [lintegral_singleton (f := fun œâ : Œ© => Œ∫ œâ s) (a := a)]
    ring
  rw [h, h_int]

end Measure

namespace ProbabilityTheory

namespace Kernel

lemma measurable_kernel_prod_mk_of_const {Œ© ùìß : Type*}
  [MeasurableSpace Œ©] [MeasurableSpace ùìß]
  (Œ∫ : Kernel Œ© ùìß) {s : Set ùìß} (hs : MeasurableSet s) :
  Measurable (fun œâ ‚Ü¶ Œ∫ œâ s) := by
  exact Kernel.measurable_coe Œ∫ hs

end Kernel

open PMF ProbabilityTheory MeasureTheory Filter Finset
open scoped ENNReal

/-- Bayes' rule on singletons  -/
lemma posterior_apply_singleton
    {Œ© ùìß : Type*} [Fintype Œ©] [Fintype ùìß] [Nonempty Œ©]
    [MeasurableSpace Œ©] [MeasurableSpace ùìß]
    [StandardBorelSpace Œ©] [StandardBorelSpace ùìß]
    (Œ∫ : Kernel Œ© ùìß) [IsMarkovKernel Œ∫] (Œº : Measure Œ©) [IsProbabilityMeasure Œº]
    (x : ùìß) (y : Œ©)
    (hpos : ((Œ∫ ‚àò‚Çò Œº) {x}) ‚â† 0) :
    (Œ∫‚Ä†Œº) x {y} = (Œº {y} * (Œ∫ y {x})) / ((Œ∫ ‚àò‚Çò Œº) {x}) := by
  classical
  have := (Measure.condKernel_apply_of_ne_zero
            (œÅ := Measure.map Prod.swap (Œº.compProd Œ∫))
            (x := x) (s := ({y} : Set Œ©)))
            ?fst_ne_zero
  ¬∑ have h‚ÇÅ :
        ((Measure.map Prod.swap (Œº.compProd Œ∫)).fst {x})
          = ((Œ∫ ‚àò‚Çò Œº) {x}) := by
      simp
    have h‚ÇÇ :
        (Measure.map Prod.swap (Œº.compProd Œ∫)) ({x} √óÀ¢ ({y} : Set Œ©))
          = (Œº.compProd Œ∫) ({y} √óÀ¢ ({x} : Set ùìß)) := by
      rw [Measure.map_apply measurable_swap ((MeasurableSet.singleton x).prod (MeasurableSet.singleton y))]
      congr 1
      ext ‚ü®a, b‚ü©
      simp [Prod.swap]; aesop
    have h‚ÇÉ :
        (Œº.compProd Œ∫) ({y} √óÀ¢ ({x} : Set ùìß))
          = Œº {y} * Œ∫ y {x} := by
      simpa using
        Measure.compProd_apply_singleton (Œº := Œº) (Œ∫ := Œ∫)
          (a := y) (s := {x}) (by simp)
    rw [ProbabilityTheory.posterior]
    rw [this, h‚ÇÅ, h‚ÇÇ, h‚ÇÉ]
    rw [div_eq_mul_inv, mul_comm (Œº {y}), mul_assoc]
    exact mul_rotate' ((‚áëŒ∫ ‚àò‚Çò Œº) {x})‚Åª¬π ((Œ∫ y) {x}) (Œº {y})
  ¬∑ have : ((Measure.map Prod.swap (Œº.compProd Œ∫)).fst {x})
        = ((Œ∫ ‚àò‚Çò Œº) {x}) := by
      simp
    simpa [this] using hpos

namespace ENNReal

private lemma mul_div_assoc (a b c : ‚Ñù‚â•0‚àû) : (a * b) / c = a * (b / c) := by
  rw [div_eq_mul_inv, mul_assoc, ‚Üê div_eq_mul_inv]

private lemma one_div_inv (a : ‚Ñù‚â•0‚àû) : (1 / a)‚Åª¬π = a := by
  simp

end ENNReal

open scoped BigOperators

/-- Unfold `Œº.bind Œ∫` on a measurable set as the integral of the kernel. -/
@[simp]
lemma Measure.bind_measurable_set {Œ© ùìß : Type*}
  [MeasurableSpace Œ©] [MeasurableSpace ùìß]
  (Œº : Measure Œ©) (Œ∫ : Kernel Œ© ùìß)
  [SFinite Œº] [IsSFiniteKernel Œ∫]
  {s : Set ùìß} (hs : MeasurableSet s) :
  Œº.bind Œ∫ s = ‚à´‚Åª œâ, Œ∫ œâ s ‚àÇŒº := by
  apply Measure.bind_apply hs
  exact Kernel.aemeasurable Œ∫

/--  Unfold `Œ∫ ‚àò‚Çò Œº` as an integral, so that in the `Fintype` case
    one can turn it into a finite sum. -/
@[simp]
lemma comp_apply {Œ© ùìß : Type*} [Fintype Œ©]
  [MeasurableSpace Œ©] [MeasurableSpace ùìß] [MeasurableSingletonClass Œ©]
  (Œ∫ : Kernel Œ© ùìß) (Œº : Measure Œ©)
  [IsSFiniteKernel Œ∫]
  {s : Set ùìß} (hs : MeasurableSet s) :
  (Œ∫ ‚àò‚Çò Œº) s = ‚àë œâ, Œº {œâ} * Œ∫ œâ s := by
  rw [Measure.bind_apply hs (Kernel.aemeasurable Œ∫)]
  rw [lintegral_fintype]
  congr with œâ
  exact CommMonoid.mul_comm ((Œ∫ œâ) s) (Œº {œâ})

/- Constructing a kernel from an arbitrary function requires measurability. A direct proof of measurability is much easier when the domain is countable. A measurable countable space with measurable singletons turns any function `f: Œ± -> Œ≤` into a measurable function. -/
lemma Kernel.ofFunOfCountable_apply [MeasurableSpace Œ±] [MeasurableSpace Œ≤] [Countable Œ±]
    /- `MeasurableSingletonClass is required when you need to evaluate kernel at a point. -/
    [MeasurableSingletonClass Œ±] (f : Œ± ‚Üí Measure Œ≤) (a : Œ±) :
    Kernel.ofFunOfCountable f a = f a := rfl

namespace Finset

/-- Sum over a finite type with exactly three pairwise-different elements. -/
lemma sum_univ_of_three {Œ± Œ≤ : Type*} [Fintype Œ±] [DecidableEq Œ±]
    [AddCommMonoid Œ≤] (f : Œ± ‚Üí Œ≤) {a b c : Œ±}
    (ha : a ‚â† b) (hb : a ‚â† c) (hc : b ‚â† c)
    (hcover : Finset.univ = {a, b, c}) :
    (‚àë x, f x) = f a + f b + f c := by
  rw [hcover]
  have h‚ÇÅ : (a : Œ±) ‚àâ ({b, c} : Finset Œ±) := by
    simp [ha, hb]
  have h‚ÇÇ : (b : Œ±) ‚àâ ({c} : Finset Œ±) := by
    simp [hc]
  simp [Finset.sum_insert h‚ÇÅ, Finset.sum_insert h‚ÇÇ, Finset.sum_singleton,
        add_comm, add_left_comm]


end Finset

end ProbabilityTheory
